// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ServeurIceMP3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package serveur;

public abstract class _ServeurIceMP3Disp extends Ice.ObjectImpl implements ServeurIceMP3
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::serveur::ServeurIceMP3"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void ajoutfichier(String titre, String auteur, String fichier)
    {
        ajoutfichier(titre, auteur, fichier, null);
    }

    public final String lireMp3(String titre, String auteur)
    {
        return lireMp3(titre, auteur, null);
    }

    public final String lireMp3ParFichier(String fichier)
    {
        return lireMp3ParFichier(fichier, null);
    }

    public final String recherche(String titre, String auteur)
    {
        return recherche(titre, auteur, null);
    }

    public final String[] rechercheAuteur(String auteur)
    {
        return rechercheAuteur(auteur, null);
    }

    public final String[] rechercheTitre(String titre)
    {
        return rechercheTitre(titre, null);
    }

    public final boolean stopMp3(String nom)
    {
        return stopMp3(nom, null);
    }

    public final void suppression(String titre, String auteur)
    {
        suppression(titre, auteur, null);
    }

    public static Ice.DispatchStatus ___ajoutfichier(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String titre;
        String auteur;
        String fichier;
        titre = __is.readString();
        auteur = __is.readString();
        fichier = __is.readString();
        __inS.endReadParams();
        __obj.ajoutfichier(titre, auteur, fichier, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___recherche(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String titre;
        String auteur;
        titre = __is.readString();
        auteur = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.recherche(titre, auteur, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___rechercheTitre(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String titre;
        titre = __is.readString();
        __inS.endReadParams();
        String[] __ret = __obj.rechercheTitre(titre, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        listetitreHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___rechercheAuteur(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String auteur;
        auteur = __is.readString();
        __inS.endReadParams();
        String[] __ret = __obj.rechercheAuteur(auteur, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        listeauteurHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___suppression(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String titre;
        String auteur;
        titre = __is.readString();
        auteur = __is.readString();
        __inS.endReadParams();
        __obj.suppression(titre, auteur, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___lireMp3(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String titre;
        String auteur;
        titre = __is.readString();
        auteur = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.lireMp3(titre, auteur, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___lireMp3ParFichier(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String fichier;
        fichier = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.lireMp3ParFichier(fichier, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___stopMp3(ServeurIceMP3 __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String nom;
        nom = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.stopMp3(nom, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "ajoutfichier",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "lireMp3",
        "lireMp3ParFichier",
        "recherche",
        "rechercheAuteur",
        "rechercheTitre",
        "stopMp3",
        "suppression"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___ajoutfichier(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___lireMp3(this, in, __current);
            }
            case 6:
            {
                return ___lireMp3ParFichier(this, in, __current);
            }
            case 7:
            {
                return ___recherche(this, in, __current);
            }
            case 8:
            {
                return ___rechercheAuteur(this, in, __current);
            }
            case 9:
            {
                return ___rechercheTitre(this, in, __current);
            }
            case 10:
            {
                return ___stopMp3(this, in, __current);
            }
            case 11:
            {
                return ___suppression(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
