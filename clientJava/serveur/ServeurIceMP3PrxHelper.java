// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ServeurIceMP3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package serveur;

public final class ServeurIceMP3PrxHelper extends Ice.ObjectPrxHelperBase implements ServeurIceMP3Prx
{
    private static final String __ajoutfichier_name = "ajoutfichier";

    public void ajoutfichier(String titre, String auteur, String fichier)
    {
        ajoutfichier(titre, auteur, fichier, null, false);
    }

    public void ajoutfichier(String titre, String auteur, String fichier, java.util.Map<String, String> __ctx)
    {
        ajoutfichier(titre, auteur, fichier, __ctx, true);
    }

    private void ajoutfichier(String titre, String auteur, String fichier, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "ajoutfichier", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    __del.ajoutfichier(titre, auteur, fichier, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_ajoutfichier(String titre, String auteur, String fichier)
    {
        return begin_ajoutfichier(titre, auteur, fichier, null, false, null);
    }

    public Ice.AsyncResult begin_ajoutfichier(String titre, String auteur, String fichier, java.util.Map<String, String> __ctx)
    {
        return begin_ajoutfichier(titre, auteur, fichier, __ctx, true, null);
    }

    public Ice.AsyncResult begin_ajoutfichier(String titre, String auteur, String fichier, Ice.Callback __cb)
    {
        return begin_ajoutfichier(titre, auteur, fichier, null, false, __cb);
    }

    public Ice.AsyncResult begin_ajoutfichier(String titre, String auteur, String fichier, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ajoutfichier(titre, auteur, fichier, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ajoutfichier(String titre, String auteur, String fichier, Callback_ServeurIceMP3_ajoutfichier __cb)
    {
        return begin_ajoutfichier(titre, auteur, fichier, null, false, __cb);
    }

    public Ice.AsyncResult begin_ajoutfichier(String titre, String auteur, String fichier, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_ajoutfichier __cb)
    {
        return begin_ajoutfichier(titre, auteur, fichier, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ajoutfichier(String titre, String auteur, String fichier, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ajoutfichier_name, __cb);
        try
        {
            __result.__prepare(__ajoutfichier_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(titre);
            __os.writeString(auteur);
            __os.writeString(fichier);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_ajoutfichier(Ice.AsyncResult __result)
    {
        __end(__result, __ajoutfichier_name);
    }

    private static final String __lireMp3_name = "lireMp3";

    public String lireMp3(String titre, String auteur)
    {
        return lireMp3(titre, auteur, null, false);
    }

    public String lireMp3(String titre, String auteur, java.util.Map<String, String> __ctx)
    {
        return lireMp3(titre, auteur, __ctx, true);
    }

    private String lireMp3(String titre, String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lireMp3", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lireMp3");
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    return __del.lireMp3(titre, auteur, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_lireMp3(String titre, String auteur)
    {
        return begin_lireMp3(titre, auteur, null, false, null);
    }

    public Ice.AsyncResult begin_lireMp3(String titre, String auteur, java.util.Map<String, String> __ctx)
    {
        return begin_lireMp3(titre, auteur, __ctx, true, null);
    }

    public Ice.AsyncResult begin_lireMp3(String titre, String auteur, Ice.Callback __cb)
    {
        return begin_lireMp3(titre, auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_lireMp3(String titre, String auteur, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lireMp3(titre, auteur, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_lireMp3(String titre, String auteur, Callback_ServeurIceMP3_lireMp3 __cb)
    {
        return begin_lireMp3(titre, auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_lireMp3(String titre, String auteur, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_lireMp3 __cb)
    {
        return begin_lireMp3(titre, auteur, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lireMp3(String titre, String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lireMp3_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lireMp3_name, __cb);
        try
        {
            __result.__prepare(__lireMp3_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(titre);
            __os.writeString(auteur);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_lireMp3(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __lireMp3_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __lireMp3ParFichier_name = "lireMp3ParFichier";

    public String lireMp3ParFichier(String fichier)
    {
        return lireMp3ParFichier(fichier, null, false);
    }

    public String lireMp3ParFichier(String fichier, java.util.Map<String, String> __ctx)
    {
        return lireMp3ParFichier(fichier, __ctx, true);
    }

    private String lireMp3ParFichier(String fichier, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "lireMp3ParFichier", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("lireMp3ParFichier");
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    return __del.lireMp3ParFichier(fichier, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_lireMp3ParFichier(String fichier)
    {
        return begin_lireMp3ParFichier(fichier, null, false, null);
    }

    public Ice.AsyncResult begin_lireMp3ParFichier(String fichier, java.util.Map<String, String> __ctx)
    {
        return begin_lireMp3ParFichier(fichier, __ctx, true, null);
    }

    public Ice.AsyncResult begin_lireMp3ParFichier(String fichier, Ice.Callback __cb)
    {
        return begin_lireMp3ParFichier(fichier, null, false, __cb);
    }

    public Ice.AsyncResult begin_lireMp3ParFichier(String fichier, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lireMp3ParFichier(fichier, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_lireMp3ParFichier(String fichier, Callback_ServeurIceMP3_lireMp3ParFichier __cb)
    {
        return begin_lireMp3ParFichier(fichier, null, false, __cb);
    }

    public Ice.AsyncResult begin_lireMp3ParFichier(String fichier, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_lireMp3ParFichier __cb)
    {
        return begin_lireMp3ParFichier(fichier, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_lireMp3ParFichier(String fichier, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lireMp3ParFichier_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __lireMp3ParFichier_name, __cb);
        try
        {
            __result.__prepare(__lireMp3ParFichier_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(fichier);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_lireMp3ParFichier(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __lireMp3ParFichier_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __recherche_name = "recherche";

    public String recherche(String titre, String auteur)
    {
        return recherche(titre, auteur, null, false);
    }

    public String recherche(String titre, String auteur, java.util.Map<String, String> __ctx)
    {
        return recherche(titre, auteur, __ctx, true);
    }

    private String recherche(String titre, String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "recherche", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("recherche");
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    return __del.recherche(titre, auteur, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_recherche(String titre, String auteur)
    {
        return begin_recherche(titre, auteur, null, false, null);
    }

    public Ice.AsyncResult begin_recherche(String titre, String auteur, java.util.Map<String, String> __ctx)
    {
        return begin_recherche(titre, auteur, __ctx, true, null);
    }

    public Ice.AsyncResult begin_recherche(String titre, String auteur, Ice.Callback __cb)
    {
        return begin_recherche(titre, auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_recherche(String titre, String auteur, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_recherche(titre, auteur, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_recherche(String titre, String auteur, Callback_ServeurIceMP3_recherche __cb)
    {
        return begin_recherche(titre, auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_recherche(String titre, String auteur, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_recherche __cb)
    {
        return begin_recherche(titre, auteur, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_recherche(String titre, String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__recherche_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __recherche_name, __cb);
        try
        {
            __result.__prepare(__recherche_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(titre);
            __os.writeString(auteur);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_recherche(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __recherche_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __rechercheAuteur_name = "rechercheAuteur";

    public String[] rechercheAuteur(String auteur)
    {
        return rechercheAuteur(auteur, null, false);
    }

    public String[] rechercheAuteur(String auteur, java.util.Map<String, String> __ctx)
    {
        return rechercheAuteur(auteur, __ctx, true);
    }

    private String[] rechercheAuteur(String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rechercheAuteur", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("rechercheAuteur");
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    return __del.rechercheAuteur(auteur, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_rechercheAuteur(String auteur)
    {
        return begin_rechercheAuteur(auteur, null, false, null);
    }

    public Ice.AsyncResult begin_rechercheAuteur(String auteur, java.util.Map<String, String> __ctx)
    {
        return begin_rechercheAuteur(auteur, __ctx, true, null);
    }

    public Ice.AsyncResult begin_rechercheAuteur(String auteur, Ice.Callback __cb)
    {
        return begin_rechercheAuteur(auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_rechercheAuteur(String auteur, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rechercheAuteur(auteur, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_rechercheAuteur(String auteur, Callback_ServeurIceMP3_rechercheAuteur __cb)
    {
        return begin_rechercheAuteur(auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_rechercheAuteur(String auteur, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_rechercheAuteur __cb)
    {
        return begin_rechercheAuteur(auteur, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rechercheAuteur(String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rechercheAuteur_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rechercheAuteur_name, __cb);
        try
        {
            __result.__prepare(__rechercheAuteur_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(auteur);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_rechercheAuteur(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __rechercheAuteur_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = listeauteurHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __rechercheTitre_name = "rechercheTitre";

    public String[] rechercheTitre(String titre)
    {
        return rechercheTitre(titre, null, false);
    }

    public String[] rechercheTitre(String titre, java.util.Map<String, String> __ctx)
    {
        return rechercheTitre(titre, __ctx, true);
    }

    private String[] rechercheTitre(String titre, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "rechercheTitre", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("rechercheTitre");
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    return __del.rechercheTitre(titre, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_rechercheTitre(String titre)
    {
        return begin_rechercheTitre(titre, null, false, null);
    }

    public Ice.AsyncResult begin_rechercheTitre(String titre, java.util.Map<String, String> __ctx)
    {
        return begin_rechercheTitre(titre, __ctx, true, null);
    }

    public Ice.AsyncResult begin_rechercheTitre(String titre, Ice.Callback __cb)
    {
        return begin_rechercheTitre(titre, null, false, __cb);
    }

    public Ice.AsyncResult begin_rechercheTitre(String titre, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rechercheTitre(titre, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_rechercheTitre(String titre, Callback_ServeurIceMP3_rechercheTitre __cb)
    {
        return begin_rechercheTitre(titre, null, false, __cb);
    }

    public Ice.AsyncResult begin_rechercheTitre(String titre, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_rechercheTitre __cb)
    {
        return begin_rechercheTitre(titre, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rechercheTitre(String titre, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__rechercheTitre_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rechercheTitre_name, __cb);
        try
        {
            __result.__prepare(__rechercheTitre_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(titre);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_rechercheTitre(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __rechercheTitre_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = listetitreHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __stopMp3_name = "stopMp3";

    public boolean stopMp3(String nom)
    {
        return stopMp3(nom, null, false);
    }

    public boolean stopMp3(String nom, java.util.Map<String, String> __ctx)
    {
        return stopMp3(nom, __ctx, true);
    }

    private boolean stopMp3(String nom, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "stopMp3", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("stopMp3");
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    return __del.stopMp3(nom, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_stopMp3(String nom)
    {
        return begin_stopMp3(nom, null, false, null);
    }

    public Ice.AsyncResult begin_stopMp3(String nom, java.util.Map<String, String> __ctx)
    {
        return begin_stopMp3(nom, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopMp3(String nom, Ice.Callback __cb)
    {
        return begin_stopMp3(nom, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopMp3(String nom, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopMp3(nom, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopMp3(String nom, Callback_ServeurIceMP3_stopMp3 __cb)
    {
        return begin_stopMp3(nom, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopMp3(String nom, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_stopMp3 __cb)
    {
        return begin_stopMp3(nom, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopMp3(String nom, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopMp3_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopMp3_name, __cb);
        try
        {
            __result.__prepare(__stopMp3_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nom);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_stopMp3(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __stopMp3_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __suppression_name = "suppression";

    public void suppression(String titre, String auteur)
    {
        suppression(titre, auteur, null, false);
    }

    public void suppression(String titre, String auteur, java.util.Map<String, String> __ctx)
    {
        suppression(titre, auteur, __ctx, true);
    }

    private void suppression(String titre, String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "suppression", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServeurIceMP3Del __del = (_ServeurIceMP3Del)__delBase;
                    __del.suppression(titre, auteur, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_suppression(String titre, String auteur)
    {
        return begin_suppression(titre, auteur, null, false, null);
    }

    public Ice.AsyncResult begin_suppression(String titre, String auteur, java.util.Map<String, String> __ctx)
    {
        return begin_suppression(titre, auteur, __ctx, true, null);
    }

    public Ice.AsyncResult begin_suppression(String titre, String auteur, Ice.Callback __cb)
    {
        return begin_suppression(titre, auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_suppression(String titre, String auteur, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_suppression(titre, auteur, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_suppression(String titre, String auteur, Callback_ServeurIceMP3_suppression __cb)
    {
        return begin_suppression(titre, auteur, null, false, __cb);
    }

    public Ice.AsyncResult begin_suppression(String titre, String auteur, java.util.Map<String, String> __ctx, Callback_ServeurIceMP3_suppression __cb)
    {
        return begin_suppression(titre, auteur, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_suppression(String titre, String auteur, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __suppression_name, __cb);
        try
        {
            __result.__prepare(__suppression_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(titre);
            __os.writeString(auteur);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_suppression(Ice.AsyncResult __result)
    {
        __end(__result, __suppression_name);
    }

    public static ServeurIceMP3Prx checkedCast(Ice.ObjectPrx __obj)
    {
        ServeurIceMP3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServeurIceMP3Prx)
            {
                __d = (ServeurIceMP3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ServeurIceMP3PrxHelper __h = new ServeurIceMP3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServeurIceMP3Prx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ServeurIceMP3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServeurIceMP3Prx)
            {
                __d = (ServeurIceMP3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ServeurIceMP3PrxHelper __h = new ServeurIceMP3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServeurIceMP3Prx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServeurIceMP3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ServeurIceMP3PrxHelper __h = new ServeurIceMP3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServeurIceMP3Prx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ServeurIceMP3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ServeurIceMP3PrxHelper __h = new ServeurIceMP3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServeurIceMP3Prx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ServeurIceMP3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServeurIceMP3Prx)
            {
                __d = (ServeurIceMP3Prx)__obj;
            }
            else
            {
                ServeurIceMP3PrxHelper __h = new ServeurIceMP3PrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ServeurIceMP3Prx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServeurIceMP3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ServeurIceMP3PrxHelper __h = new ServeurIceMP3PrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::serveur::ServeurIceMP3"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ServeurIceMP3DelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ServeurIceMP3DelD();
    }

    public static void __write(IceInternal.BasicStream __os, ServeurIceMP3Prx v)
    {
        __os.writeProxy(v);
    }

    public static ServeurIceMP3Prx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ServeurIceMP3PrxHelper result = new ServeurIceMP3PrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
