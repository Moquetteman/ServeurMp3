// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ServeurIceMP3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <ServeurIceMP3.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __serveur__ServeurIceMP3__ajoutfichier_name = "ajoutfichier";

const ::std::string __serveur__ServeurIceMP3__recherche_name = "recherche";

const ::std::string __serveur__ServeurIceMP3__rechercheTitre_name = "rechercheTitre";

const ::std::string __serveur__ServeurIceMP3__rechercheAuteur_name = "rechercheAuteur";

const ::std::string __serveur__ServeurIceMP3__suppression_name = "suppression";

const ::std::string __serveur__ServeurIceMP3__lireMp3_name = "lireMp3";

const ::std::string __serveur__ServeurIceMP3__lireMp3ParFichier_name = "lireMp3ParFichier";

const ::std::string __serveur__ServeurIceMP3__stopMp3_name = "stopMp3";

}
::IceProxy::Ice::Object* ::IceProxy::serveur::upCast(::IceProxy::serveur::ServeurIceMP3* p) { return p; }

void
::IceProxy::serveur::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::serveur::ServeurIceMP3>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::serveur::ServeurIceMP3;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::serveur::ServeurIceMP3::ajoutfichier(const ::std::string& titre, const ::std::string& auteur, const ::std::string& fichier, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__ajoutfichier_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            __del->ajoutfichier(titre, auteur, fichier, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_ajoutfichier(const ::std::string& titre, const ::std::string& auteur, const ::std::string& fichier, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__ajoutfichier_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__ajoutfichier_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __os->write(fichier);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::serveur::ServeurIceMP3::end_ajoutfichier(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __serveur__ServeurIceMP3__ajoutfichier_name);
}

::std::string
IceProxy::serveur::ServeurIceMP3::recherche(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__recherche_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__serveur__ServeurIceMP3__recherche_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            return __del->recherche(titre, auteur, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_recherche(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__serveur__ServeurIceMP3__recherche_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__recherche_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__recherche_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::serveur::ServeurIceMP3::end_recherche(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __serveur__ServeurIceMP3__recherche_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::serveur::listetitre
IceProxy::serveur::ServeurIceMP3::rechercheTitre(const ::std::string& titre, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__rechercheTitre_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__serveur__ServeurIceMP3__rechercheTitre_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            return __del->rechercheTitre(titre, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_rechercheTitre(const ::std::string& titre, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__serveur__ServeurIceMP3__rechercheTitre_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__rechercheTitre_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__rechercheTitre_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::serveur::listetitre
IceProxy::serveur::ServeurIceMP3::end_rechercheTitre(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __serveur__ServeurIceMP3__rechercheTitre_name);
    ::serveur::listetitre __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::serveur::listeauteur
IceProxy::serveur::ServeurIceMP3::rechercheAuteur(const ::std::string& auteur, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__rechercheAuteur_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__serveur__ServeurIceMP3__rechercheAuteur_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            return __del->rechercheAuteur(auteur, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_rechercheAuteur(const ::std::string& auteur, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__serveur__ServeurIceMP3__rechercheAuteur_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__rechercheAuteur_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__rechercheAuteur_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(auteur);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::serveur::listeauteur
IceProxy::serveur::ServeurIceMP3::end_rechercheAuteur(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __serveur__ServeurIceMP3__rechercheAuteur_name);
    ::serveur::listeauteur __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::serveur::ServeurIceMP3::suppression(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__suppression_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            __del->suppression(titre, auteur, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_suppression(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__suppression_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__suppression_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::serveur::ServeurIceMP3::end_suppression(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __serveur__ServeurIceMP3__suppression_name);
}

::std::string
IceProxy::serveur::ServeurIceMP3::lireMp3(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__lireMp3_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__serveur__ServeurIceMP3__lireMp3_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            return __del->lireMp3(titre, auteur, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_lireMp3(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__serveur__ServeurIceMP3__lireMp3_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__lireMp3_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__lireMp3_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::serveur::ServeurIceMP3::end_lireMp3(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __serveur__ServeurIceMP3__lireMp3_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::serveur::ServeurIceMP3::lireMp3ParFichier(const ::std::string& fichier, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__lireMp3ParFichier_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__serveur__ServeurIceMP3__lireMp3ParFichier_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            return __del->lireMp3ParFichier(fichier, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_lireMp3ParFichier(const ::std::string& fichier, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__serveur__ServeurIceMP3__lireMp3ParFichier_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__lireMp3ParFichier_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__lireMp3ParFichier_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(fichier);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::serveur::ServeurIceMP3::end_lireMp3ParFichier(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __serveur__ServeurIceMP3__lireMp3ParFichier_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

bool
IceProxy::serveur::ServeurIceMP3::stopMp3(const ::std::string& nom, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __serveur__ServeurIceMP3__stopMp3_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__serveur__ServeurIceMP3__stopMp3_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::serveur::ServeurIceMP3* __del = dynamic_cast< ::IceDelegate::serveur::ServeurIceMP3*>(__delBase.get());
            return __del->stopMp3(nom, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::serveur::ServeurIceMP3::begin_stopMp3(const ::std::string& nom, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__serveur__ServeurIceMP3__stopMp3_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __serveur__ServeurIceMP3__stopMp3_name, __del, __cookie);
    try
    {
        __result->__prepare(__serveur__ServeurIceMP3__stopMp3_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(nom);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::serveur::ServeurIceMP3::end_stopMp3(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __serveur__ServeurIceMP3__stopMp3_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::serveur::ServeurIceMP3::ice_staticId()
{
    return ::serveur::ServeurIceMP3::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::serveur::ServeurIceMP3::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::serveur::ServeurIceMP3);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::serveur::ServeurIceMP3::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::serveur::ServeurIceMP3);
}

::IceProxy::Ice::Object*
IceProxy::serveur::ServeurIceMP3::__newInstance() const
{
    return new ServeurIceMP3;
}

void
IceDelegateM::serveur::ServeurIceMP3::ajoutfichier(const ::std::string& titre, const ::std::string& auteur, const ::std::string& fichier, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__ajoutfichier_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __os->write(fichier);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::std::string
IceDelegateM::serveur::ServeurIceMP3::recherche(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__recherche_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::serveur::listetitre
IceDelegateM::serveur::ServeurIceMP3::rechercheTitre(const ::std::string& titre, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__rechercheTitre_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::serveur::listetitre __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::serveur::listeauteur
IceDelegateM::serveur::ServeurIceMP3::rechercheAuteur(const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__rechercheAuteur_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(auteur);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::serveur::listeauteur __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::serveur::ServeurIceMP3::suppression(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__suppression_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::std::string
IceDelegateM::serveur::ServeurIceMP3::lireMp3(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__lireMp3_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(titre);
        __os->write(auteur);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::serveur::ServeurIceMP3::lireMp3ParFichier(const ::std::string& fichier, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__lireMp3ParFichier_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(fichier);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::serveur::ServeurIceMP3::stopMp3(const ::std::string& nom, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __serveur__ServeurIceMP3__stopMp3_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(nom);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::serveur::ServeurIceMP3::ajoutfichier(const ::std::string& titre, const ::std::string& auteur, const ::std::string& fichier, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_titre, const ::std::string& __p_auteur, const ::std::string& __p_fichier, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_titre(__p_titre),
            _m_auteur(__p_auteur),
            _m_fichier(__p_fichier)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->ajoutfichier(_m_titre, _m_auteur, _m_fichier, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_titre;
        const ::std::string& _m_auteur;
        const ::std::string& _m_fichier;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__ajoutfichier_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(titre, auteur, fichier, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::serveur::ServeurIceMP3::recherche(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_titre, const ::std::string& __p_auteur, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_titre(__p_titre),
            _m_auteur(__p_auteur)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->recherche(_m_titre, _m_auteur, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_titre;
        const ::std::string& _m_auteur;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__recherche_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, titre, auteur, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::serveur::listetitre
IceDelegateD::serveur::ServeurIceMP3::rechercheTitre(const ::std::string& titre, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::serveur::listetitre& __result, const ::std::string& __p_titre, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_titre(__p_titre)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->rechercheTitre(_m_titre, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::serveur::listetitre& _result;
        const ::std::string& _m_titre;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__rechercheTitre_name, ::Ice::Normal, __context);
    ::serveur::listetitre __result;
    try
    {
        _DirectI __direct(__result, titre, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::serveur::listeauteur
IceDelegateD::serveur::ServeurIceMP3::rechercheAuteur(const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::serveur::listeauteur& __result, const ::std::string& __p_auteur, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_auteur(__p_auteur)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->rechercheAuteur(_m_auteur, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::serveur::listeauteur& _result;
        const ::std::string& _m_auteur;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__rechercheAuteur_name, ::Ice::Normal, __context);
    ::serveur::listeauteur __result;
    try
    {
        _DirectI __direct(__result, auteur, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::serveur::ServeurIceMP3::suppression(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_titre, const ::std::string& __p_auteur, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_titre(__p_titre),
            _m_auteur(__p_auteur)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->suppression(_m_titre, _m_auteur, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::std::string& _m_titre;
        const ::std::string& _m_auteur;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__suppression_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(titre, auteur, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::serveur::ServeurIceMP3::lireMp3(const ::std::string& titre, const ::std::string& auteur, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_titre, const ::std::string& __p_auteur, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_titre(__p_titre),
            _m_auteur(__p_auteur)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->lireMp3(_m_titre, _m_auteur, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_titre;
        const ::std::string& _m_auteur;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__lireMp3_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, titre, auteur, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::serveur::ServeurIceMP3::lireMp3ParFichier(const ::std::string& fichier, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_fichier, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_fichier(__p_fichier)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->lireMp3ParFichier(_m_fichier, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_fichier;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__lireMp3ParFichier_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, fichier, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::serveur::ServeurIceMP3::stopMp3(const ::std::string& nom, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_nom, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nom(__p_nom)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::serveur::ServeurIceMP3* servant = dynamic_cast< ::serveur::ServeurIceMP3*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->stopMp3(_m_nom, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_nom;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __serveur__ServeurIceMP3__stopMp3_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, nom, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* serveur::upCast(::serveur::ServeurIceMP3* p) { return p; }

namespace
{
const ::std::string __serveur__ServeurIceMP3_ids[2] =
{
    "::Ice::Object",
    "::serveur::ServeurIceMP3"
};

}

bool
serveur::ServeurIceMP3::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__serveur__ServeurIceMP3_ids, __serveur__ServeurIceMP3_ids + 2, _s);
}

::std::vector< ::std::string>
serveur::ServeurIceMP3::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__serveur__ServeurIceMP3_ids[0], &__serveur__ServeurIceMP3_ids[2]);
}

const ::std::string&
serveur::ServeurIceMP3::ice_id(const ::Ice::Current&) const
{
    return __serveur__ServeurIceMP3_ids[1];
}

const ::std::string&
serveur::ServeurIceMP3::ice_staticId()
{
    return __serveur__ServeurIceMP3_ids[1];
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___ajoutfichier(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string titre;
    ::std::string auteur;
    ::std::string fichier;
    __is->read(titre);
    __is->read(auteur);
    __is->read(fichier);
    __inS.endReadParams();
    ajoutfichier(titre, auteur, fichier, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___recherche(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string titre;
    ::std::string auteur;
    __is->read(titre);
    __is->read(auteur);
    __inS.endReadParams();
    ::std::string __ret = recherche(titre, auteur, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___rechercheTitre(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string titre;
    __is->read(titre);
    __inS.endReadParams();
    ::serveur::listetitre __ret = rechercheTitre(titre, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___rechercheAuteur(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string auteur;
    __is->read(auteur);
    __inS.endReadParams();
    ::serveur::listeauteur __ret = rechercheAuteur(auteur, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___suppression(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string titre;
    ::std::string auteur;
    __is->read(titre);
    __is->read(auteur);
    __inS.endReadParams();
    suppression(titre, auteur, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___lireMp3(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string titre;
    ::std::string auteur;
    __is->read(titre);
    __is->read(auteur);
    __inS.endReadParams();
    ::std::string __ret = lireMp3(titre, auteur, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___lireMp3ParFichier(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string fichier;
    __is->read(fichier);
    __inS.endReadParams();
    ::std::string __ret = lireMp3ParFichier(fichier, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
serveur::ServeurIceMP3::___stopMp3(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string nom;
    __is->read(nom);
    __inS.endReadParams();
    bool __ret = stopMp3(nom, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __serveur__ServeurIceMP3_all[] =
{
    "ajoutfichier",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "lireMp3",
    "lireMp3ParFichier",
    "recherche",
    "rechercheAuteur",
    "rechercheTitre",
    "stopMp3",
    "suppression"
};

}

::Ice::DispatchStatus
serveur::ServeurIceMP3::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__serveur__ServeurIceMP3_all, __serveur__ServeurIceMP3_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __serveur__ServeurIceMP3_all)
    {
        case 0:
        {
            return ___ajoutfichier(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___lireMp3(in, current);
        }
        case 6:
        {
            return ___lireMp3ParFichier(in, current);
        }
        case 7:
        {
            return ___recherche(in, current);
        }
        case 8:
        {
            return ___rechercheAuteur(in, current);
        }
        case 9:
        {
            return ___rechercheTitre(in, current);
        }
        case 10:
        {
            return ___stopMp3(in, current);
        }
        case 11:
        {
            return ___suppression(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
serveur::ServeurIceMP3::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
serveur::ServeurIceMP3::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
serveur::__patch(ServeurIceMP3Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::serveur::ServeurIceMP3Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::serveur::ServeurIceMP3::ice_staticId(), v);
    }
}
